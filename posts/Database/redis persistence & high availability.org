#+TITLE: Redis Data Persistence and High-Availability
#+DATE: Apr 25, 2019

* Redis data persistence and crash recovery
- [X] does redis persist data?

It depends on the configuration.  It has RDB and AOF and their
combination to provide different level of durability.  I realize that
Redis, PostgreSQL, MySQL alike provide different level of durability
regards crashing.
** RDB
Snapshots.

Impl:
1. Redis forks. We now have a child and a parent process.
2. The child starts to write the data-set to a temporary RDB file.
3. When the child is done writing the new RDB file, it replaces the
   old one.

Caller of loading from a RDB:
- ~rdbLoad~:
  - server.c: ~loadDataFromDisk~
  - replication.c: ~readSyncBulkPayload~
- ~rdbLoadRio~:
  - aof.c: ~loadAppendOnlyFile~

Caller of saving to a RDB:
- ~rdbSave~:
  - db.c: ~flushallCommand~
  - rdb.c: ~rdbSaveBackground~
  - rdb.c: ~saveCommand~
  - server.c: ~prepareForShutdown~
- ~rdbSaveRio~
  - aof.c: ~rewriteAppendOnlyFile~
- ~rdbSaveRioWithEOFMark~
  - rdb.c: ~rdbSaveToSlavesSockets~
** AOF
Operation logging + log compacting (log rewriting).  

Three ~fsync~ policy:
1. ~always~
2. ~everysec~
3. ~no~

Loading from a AOF (~loadAppendOnlyFile~) is invoked when
~loadDataFromDisk~ (server.c) at the server start.

When a command is to 'propagate' (to AOF or slaves),
~feedAppendOnlyFile~ is called to cat the command to the
~server.aof_buffer~.  And some time-related command may be
transformed.  For example, ~expire~ command will be transformed to
~expireat~ command.

Before re-entering the event loop or after a period (depends on the
config of ~appendfsync~, ~flushAppendOnlyFile~ is called to fsync the
writes.
** About redis recovery time
#+BEGIN_QUOTE
In experience, from a blog, Redis server will load an RDB file at the
rate of 10 ~ 20 seconds per gigabyte of memory used.  Loading an AOF
file that was just rewritten by the server takes something like twice
per gigabyte in Redis 2.6, but of course if a lot of writes reached
the AOF file after the latest compaction it can take longer.

It is a better idea to use replication.  For example in the case of
redis version upgrade, the admin will setup the Redis instance running
the new version as slave of the old instance, then will point all the
clients to the new instance, will turn this instance into a master,
and will finally shut down the old one.
#+END_QUOTE
* Redis high-availability: replication, cluster, and sentinel
Redis replication is a master-slave method to achieve fail-over
and serve read-only request on slaves.  
+ The updates are propagate from the master to slaves in an aync way
  (where the master only wait for configurable N replies from
  slaves).
+ The slaves can serve read-only request and stale data (when
  in-sync, if disabled, the slave will reply an error "SYNC with
  master in progress")

Redis cluster is a solution for static, hash-based data partition
among several redis masters who can either be a standalone server or a
replication setup (1 master with several slaves).

Redis sentinel is a dynamic reconfiguration mechanism to manage,
monitor, reconfigure a replication setup (1 master with several
slaves).
+ sentinels are on consensus of the state of the master in a
  replication group.
+ clients connect to the sentinels to know the current master.

